1071. Greatest Common Divisor of Strings
Solved
Easy
For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).
Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
Example 1:
Input: str1 = "ABCABC", str2 = "ABC"
Output: "ABC"
Example 2:
Input: str1 = "ABABAB", str2 = "ABAB"
Output: "AB"
Example 3:
Input: str1 = "LEET", str2 = "CODE"
Output: ""
Constraints:
1 <= str1.length, str2.length <= 1000
str1 and str2 consist of English uppercase letters.
##code
class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        # If concatenations don't match, no gcd string exists
        if str1 + str2 != str2 + str1:
            return ""
        
        # Function to compute gcd of two numbers without math.gcd
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        # Find gcd length
        gcd_len = gcd(len(str1), len(str2))
        
        # Candidate gcd string
        x = str1[:gcd_len]
        
        # Verify both are divisible by x
        if str1 == x * (len(str1) // len(x)) and str2 == x * (len(str2) // len(x)):
            return x
        else:
            return ""
